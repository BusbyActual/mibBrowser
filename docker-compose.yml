version: '3'

services:

  # Data API and authentication/authorization
  api:
    image: node:8.4.0-alpine
    hostname: api
    depends_on:
      - db
      - redis
    environment:
      - CORS_ORIGIN=http://localhost:3000,http://localhost:3001
      - DATABASE_URL=postgres://postgres@db:5432/dev
      - DATABASE_DEBUG=false
      - REDIS_URL=redis://redis:6379/0
      - SESSION_SECRET=wZjwhFtzQsd7r87W6AZw45Sm
      - FACEBOOK_ID=1821424564802638
      - FACEBOOK_SECRET=2339bdf25f236a42fc3a18280bf455e8
      - GOOGLE_ID=xxxxx.apps.googleusercontent.com
      - GOOGLE_SECRET=xxxxx
      - TWITTER_KEY=xxxxx
      - TWITTER_SECRET=xxxxx
    ports:
      - "8080:8080"
      - "127.0.0.1:9229:9229" # V8 inspector for tools/run.js
      - "127.0.0.1:9230:9230" # V8 inspector for src/server.js
    volumes:
      - yarn:/root/.cache/yarn
      - ./:/usr/src/app
    user: node
    working_dir: /usr/src/app
    command: node tools/run.js # or, `node --inspect=0.0.0.0:9229 tools/run.js`

  # SQL and document data store
  db:
    image: postgres:9.6.4-alpine
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    volumes:
      - db:/var/lib/postgresql/data
      - ./postgres-initdb.sh:/docker-entrypoint-initdb.d/initdb.sh
    # ports:
    #   - "127.0.0.1:5432:5432" # you can override it via docker-compose.override.yml

  # Distributed in-memory cache
  redis:
    image: redis:4.0.1-alpine
    read_only: true
    volumes:
      - redis:/data
    user: redis

volumes:
  db:
  redis:
  yarn:
